package org.verong.demo.database.spring.data.jpa.persistence.repository.impl;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.ParameterExpression;
import jakarta.persistence.criteria.Root;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.verong.demo.database.spring.data.jpa.persistence.dto.StudentIdAndNameDto;
import org.verong.demo.database.spring.data.jpa.persistence.model.Student;
import org.verong.demo.database.spring.data.jpa.persistence.model.Student_;
import org.verong.demo.database.spring.data.jpa.persistence.repository.EntityManagerStudentRepository;

import java.util.List;

@Repository
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class EntityManagerStudentRepositoryImpl implements EntityManagerStudentRepository {

    private final EntityManager entityManager;

    @Override
    public List<StudentIdAndNameDto> findByScholarshipUsingJPQL(Boolean scholarship) {
        var jpql = """
                select new org.verong.demo.database.spring.data.jpa.persistence.dto.StudentIdAndNameDto(s.id, s.firstName, s.lastName)
                from Student s
                where s.scholarship = :scholarship
                """;
        var selectByScholarshipQuery = entityManager.createQuery(jpql, StudentIdAndNameDto.class);
        selectByScholarshipQuery.setParameter("scholarship", scholarship);
        return selectByScholarshipQuery.getResultList();
    }

    @Override
    public List<StudentIdAndNameDto> findByScholarshipUsingCriteriaApi(Boolean scholarship) {

        // Create CriteriaBuilder and CriteriaQuery with expected result type
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<StudentIdAndNameDto> criteriaQuery = cb.createQuery(StudentIdAndNameDto.class);

        // Create Root<Student> object which defines "from students" clause
        Root<Student> root = criteriaQuery.from(Student.class);

            /*
                Using method select() we define "select s.id, s.first_name, s.last_name" clause. However, our goal is to
                get DTO as a result object. Calling cb.construct() we can tell JPA (Hibernate) to convert each database
                row into StudentIdAndNameDto.class using record constructor:

                StudentIdAndNameDto(Long id, String firstName,String lastname);

                IMPORTANT:  You can see that the specific class "Student_" instead of root.get("fieldName") is used to
                            set name of Student field safely. The idea of using a specific class which represent
                            original class instead of Strings is about making this specification much safer because you
                            use Java object, and it is like a constant that you can refer to each time. Using String has
                            higher chance to make a mistake.

                This specific class "Student_" is generated by dependency "hibernate-jpamodelgen" in pom.xml.
                To generate that class (or more classes if you have more entities) you need to rum maven goal "compile".
            */
        criteriaQuery.select(cb.construct(
                StudentIdAndNameDto.class,
                root.get(Student_.ID), root.get(Student_.FIRST_NAME), root.get(Student_.LAST_NAME))
        );

        // Define "where s.scholarship = :scholarship" clause with parameter ":scholarship" that we will set later
        ParameterExpression<Boolean> scholarshipParameter = cb.parameter(Boolean.class);
        criteriaQuery.where(cb.equal(root.get(Student_.SCHOLARSHIP), scholarshipParameter));

        // Create TypedQuery<StudentIdAndNameDto> to be able to set the parameter and call getResultList()
        TypedQuery<StudentIdAndNameDto> selectByScholarshipQuery = entityManager.createQuery(criteriaQuery);
        selectByScholarshipQuery.setParameter(scholarshipParameter, scholarship);

        return selectByScholarshipQuery.getResultList();
    }
}
